---
title: "Hmk_04_Data frames and data wrangling"
format: gfm
editor: visual
---

Please read the entire [R for Data Science](https://r4ds.hadley.nz/data-transform) before you do this homework.

This homework relies on the `nycflights13` package, which contains several data frames, including `airlines`, `airports`, `flights`, `planes`, and `weather`. Loading `nycflights13` (`library(nycflights13)`) puts all of these data frames on the search path.

## Installing data packages

Remember that any package needs to be installed only once (per version of R), but needs to be loaded every time we start a new R session.

To install `nyclflights13`, use `install.packages("nycflights13")` (with quotation marks). To load it, use `library(nycflights13)`.

```{r}
library(nycflights13)


```

# Question 1: filtering

Make a plot of air time as a function of distance (air time on the y axis, distance on the x axis) for all flights that meet the following criteria:

-   originate from LaGuardia airport ("LGA")
-   departed on the 16th of the month
-   have a flight distance of less than 2000

```{r}
ggplot(data = flights, mapping = aes(x = distance, y = air_time, airport="LGA", day=16, distance <2000 )) +
  geom_point()

```

# Question 2: dealing with NAs

Make a data frame of all of the rows of `flights` that have values for *both* `arr_time` and `dep_time` - that is, neither of those values are `NA`.

```{r}
library(dplyr)
valid_flights <- flights[complete.cases(flights[, c("arr_time", "dep_time")]), ]

```

## filtering NAs

`ggplot()` will automatically remove NA values from the plot, as you may have seen in question 1, but it emits a warning message about that. Of course you could silence the warning message using [chunk options](https://bookdown.org/yihui/rmarkdown-cookbook/chunk-options.html), but how could you prevent them from appearing in the first place?

-   the code nm.rm=TRUE can be used to get ride of the warning message.

```         
```

# Question 3: adding columns

Create a data frame of average flight speeds, based on `air_time` and `distance`. Make either a histogram or a density plot of the data. If you like, you may break the data out (e.g. by airline, or some other variable) in a way that you think makes sense.

```{r}

library(tidyverse)
valid_flights <- flights[!is.na(flights$air_time) & !is.na(flights$distance), ] |>
  mutate(average_speeds=distance/air_time) 

valid_flights <- flights |> 
  filter(!is.na(air_time) & !is.na(distance))|>
  mutate(average_speeds=distance/air_time) 



ggplot(data = valid_flights, aes(x=average_speeds)) + 
  geom_histogram() + 
  facet_wrap(~carrier)
```

\
